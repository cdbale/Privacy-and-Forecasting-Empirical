start <- Sys.time()
size <- 1000000
x <- matrix(rnorm(n=size, mean=100), nrow=sqrt(size))
for (i in 1:10){
y <- solve(t(x)%*%x)%*%t(x)
}
stop <- Sys.time()
stop-start
start <- Sys.time()
size <- 1000000
x <- matrix(rnorm(n=size, mean=100), nrow=sqrt(size))
for (i in 1:10){
y <- solve(t(x)%*%x)%*%t(x)
}
stop <- Sys.time()
stop-start
start <- Sys.time()
size <- 1000000
x <- matrix(rnorm(n=size, mean=100), nrow=sqrt(size))
for (i in 1:10){
y <- solve(t(x)%*%x)%*%t(x)
}
stop <- Sys.time()
stop-start
start <- Sys.time()
size <- 1000000
x <- matrix(rnorm(n=size, mean=100), nrow=sqrt(size))
for (i in 1:10){
y <- solve(t(x)%*%x)%*%t(x)
}
stop <- Sys.time()
stop-start
library(tidyverse)
library(tsfeatures)
library(ggplot2)
library(ggpubr)
library(gridExtra)
library(forecast)
library(e1071)
library(tsne)
source('custom_feature_functions.R')
import_data <- function(file_string, sp, exclude_first_col=FALSE){
ts <- read.csv(file_string)
if (exclude_first_col){
ts <- ts[,2:ncol(ts)]
}
td <- as.list(as.data.frame(t(ts)))
td <- lapply(td, function(x) x[!is.na(x)])
td <- lapply(td, function(x) ts(x, frequency=sp))
td <- lapply(td, function(x) ifelse(x >= 1, x, 1))
td <- lapply(td, log)
return(td)
}
feature_calculator <- function(ts, features_to_calculate, scale_series, sp){
temp <- tsfeatures(ts, features=features_to_calculate, scale=scale_series) %>%
select(-nperiods, -seasonal_period)
if(sp > 1){
temp <- temp %>%
select(-seasonal_strength, -peak, -trough, -seas_acf1, -seas_pacf)
}
return(temp)
}
feature_calculator_seasonal <- function(ts, features_to_calculate, scale_series, sp){
temp <- tsfeatures(ts, features=features_to_calculate, scale=scale_series) %>%
select(-nperiods, -seasonal_period)
return(temp)
}
# vector of feature names to calculate in k-nTS+
fv <- c("entropy_c", "lumpiness", "stability",
"max_level_shift_c", "max_var_shift_c", "max_kl_shift_c",
"crossing_points", "flat_spots", "hurst",
"unitroot_kpss", "unitroot_pp", "stl_features",
"acf_features", "pacf_features",
"nonlinearity", "series_mean", "series_variance",
"skewness", "kurtosis")
calc_feature_density <- function(tsne_features){
# also calculate the "density" of the space
feature_dists <- dist(tsne_features)
feature_density <- sum(feature_dists)/nrow(tsne_features)
}
feature_tsne <- function(ts_data_file, features_to_calculate, sf, sp){
temp <- import_data(paste0("../../Data/Cleaned/", ts_data_file), sp)
# split X into separate datasets, one for each series length
Xs <- list()
lengths <- sapply(temp, length)
unique_lengths <- unique(lengths)
for (l in seq_along(unique_lengths)){
ids <- lengths==unique_lengths[l]
Xs[[l]] <- temp[ids]
}
temp_features <- lapply(Xs, function(x) feature_calculator_seasonal(x, features_to_calculate, scale=FALSE, sp))
spec_ents <- lapply(temp_features, function(x) x[,'entropy'] %>% pull(entropy))
temp_features <- lapply(temp_features, function(x) x[,sf])
temp_tsne <- lapply(temp_features, function(x) tsne(as.matrix(x), whiten=FALSE))
tsne_densities <- lapply(temp_tsne, calc_feature_density)
all_results <- tibble()
for (i in 1:length(temp_tsne)){
all_results <- bind_rows(all_results, tibble(dataid=i,
"Dim1"=temp_tsne[[i]][,1],
"Dim2"=temp_tsne[[i]][,2],
"SpecEntropy"=spec_ents[[i]],
"FeatureDensity"=tsne_densities[[i]]))
}
return(all_results)
}
# paths to the data files and feature files
fp <- "../../Data/Cleaned/"
# import names of original data files - this may include protected versions
# so we have to remove those
file_names <- grep("_h1_train", list.files(fp), value=TRUE)
