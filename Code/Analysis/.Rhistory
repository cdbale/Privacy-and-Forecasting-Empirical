#
# annotate_figure(g1, top=text_grob("", face = "bold", size = 14))
#
# g2 <- ggarrange(gs_plot, bs_plot,
#                 gs_knts_plot, bs_knts_plot,
#                 gs_an_plot, bs_an_plot,
#                 nrow=3, ncol=2, labels=c("A.1", "B.1", "A.2", "B.2", "A.3", "B.3"))
#
# annotate_figure(g2, top=text_grob("", face = "bold", size = 14))
# used to have example series in separate plots, now combined
knts_plot <- tibble(Desirable = kntsp_series[[gs_num]][-1],
Undesirable = kntsp_series[[bs_num]],
t = 1:(length(kntsp_series[[gs_num]])-1)) %>%
gather(key="Series", value="x", -t) %>%
ggplot(aes(x=t, y=x, color=Series)) +
geom_line() +
geom_point(aes(shape=Series), size=2.5) +
scale_colour_manual(values=color_group) +
# geom_line(linewidth=.7, color="#3399CC") +
# geom_point() +
ylim(0, 10) +
labs(title="(k-nTS+, k = 3, M = 1.5) Protected Series with Desirable and Undesirable Features",
x = 'Time',
y = 'x',
color = "Feature Type",
shape = "Feature Type")
print(knts_plot)
# used to have example series in separate plots, now combined
an_plot <- tibble(Desirable = an_series[[gs_num]][-1],
Undesirable = an_series[[bs_num]],
t = 1:(length(an_series[[gs_num]])-1)) %>%
gather(key="Series", value="x", -t) %>%
ggplot(aes(x=t, y=x, color=Series)) +
geom_line() +
geom_point(aes(shape=Series), size=2.5) +
scale_colour_manual(values=color_group) +
# geom_line(linewidth=.7, color="#3399CC") +
# geom_point() +
ylim(0, 10) +
labs(title="(AN, s = 1.5) Protected Series with Desirable and Undesirable Features",
x = 'Time',
y = 'x',
color = "Feature Type",
shape = "Feature Type")
print(an_plot)
combined_series_comparison <- ggarrange(unprotected_plot, knts_plot, an_plot, ncol=1, nrow=3, labels=c("(i)", "(ii)", "(iii)"))
print(combined_series_comparison)
if (file.exists(paste0("../../Outputs/Figures/M3/"))){
ggsave(filename="side-by-side-protected-series.pdf", plot=combined_series_comparison, path="../../Outputs/Figures/M3/",
width = 11.1, height = 10)
} else {
dir.create(paste0("../../Outputs/Figures/M3/"), recursive=TRUE)
ggsave(filename="side-by-side-protected-series.pdf", plot=combined_series_comparison, path="../../Outputs/Figures/M3/",
width = 11.1, height = 10)
}
# feature values for the example series.
sf <- c("entropy", "e_acf1", "trend", "seasonal_strength",
"skewness", "kurtosis", "hurst",
"series_mean", "series_variance", "spike", "max_level_shift", "max_var_shift")
gs_orig <- m3_full_features %>%
filter(parameter == 'Original', snum %in% c(gs_num, bs_num)) %>%
select(any_of(c("snum", sf)))
gs_orig
gs_kntsp <- m3_full_features %>%
filter(method=="k-nts-plus-bounded", parameter == '3-1.5', snum %in% c(gs_num, bs_num)) %>%
select(any_of(c("snum", sf)))
gs_kntsp
gs_an <- m3_full_features %>%
filter(method=='AN', parameter == '1.5', snum %in% c(gs_num, bs_num)) %>%
select(any_of(c("snum", sf)))
gs_an
#################################################################################
#################################################################################
#################################################################################
#################################################################################
# compare PCA plots and loadings from k-nTS+ and unprotected series
# 2x2 plot
# original features dataframe
feature_file_path <- "../../Data/Features/M3/"
og_feat_files <- grep("k-nts", list.files(feature_file_path), value=TRUE, invert=TRUE)
og_feat_files <- grep("DP_", og_feat_files, value=TRUE, invert=TRUE)
og_feat_files <- grep("AN_", og_feat_files, value=TRUE, invert=TRUE)
og_feat_files <- grep("h1_train", og_feat_files, value=TRUE)
full_og_feats <- tibble()
for (f in og_feat_files){
sp <- ifelse(grepl("monthly", f), 12, ifelse(grepl("quarterly", f), 4, 1))
temp <- read_csv(paste0(feature_file_path, f)) %>%
mutate(data = strsplit(f, "_")[[1]][2])
if (sp %in% c(12, 4)){
temp <- temp %>%
select(-seasonal_strength, -peak, -trough, -seas_acf1, -seas_pacf)
}
full_og_feats <- bind_rows(full_og_feats, temp)
}
# k-nTS features data frame
kntsp_feat_files <- grep("k-nts-plus-bounded_3-1.5", list.files(feature_file_path), value=TRUE)
full_kntsp_feats <- tibble()
for (f in kntsp_feat_files){
sp <- ifelse(grepl("monthly", f), 12, ifelse(grepl("quarterly", f), 4, 1))
temp <- read_csv(paste0(feature_file_path, f)) %>%
mutate(data = strsplit(f, "_")[[1]][4])
if (sp %in% c(12, 4)){
temp <- temp %>%
select(-seasonal_strength, -peak, -trough, -seas_acf1, -seas_pacf)
}
full_kntsp_feats <- bind_rows(full_kntsp_feats, temp)
}
# k-nTS features data frame
knts_feat_files <- grep("k-nts_3", list.files(feature_file_path), value=TRUE)
full_knts_feats <- tibble()
for (f in knts_feat_files){
sp <- ifelse(grepl("monthly", f), 12, ifelse(grepl("quarterly", f), 4, 1))
temp <- read_csv(paste0(feature_file_path, f)) %>%
mutate(data = strsplit(f, "_")[[1]][4])
if (sp %in% c(12, 4)){
temp <- temp %>%
select(-seasonal_strength, -peak, -trough, -seas_acf1, -seas_pacf)
}
full_knts_feats <- bind_rows(full_knts_feats, temp)
}
# AN features data frame
an_feat_files <- grep("AN_1.5_", list.files(feature_file_path), value=TRUE)
an_feat_files <- grep("h1_train", an_feat_files, value=TRUE)
full_an_feats <- tibble()
for (f in an_feat_files){
sp <- ifelse(grepl("monthly", f), 12, ifelse(grepl("quarterly", f), 4, 1))
temp <- read_csv(paste0(feature_file_path, f)) %>%
mutate(data = strsplit(f, "_")[[1]][4])
if (sp %in% c(12, 4)){
temp <- temp %>%
select(-seasonal_strength, -peak, -trough, -seas_acf1, -seas_pacf)
}
full_an_feats <- bind_rows(full_an_feats, temp)
}
# DP features data frame
dp_feat_files <- grep("DP_4.6_", list.files(feature_file_path), value=TRUE)
dp_feat_files <- grep("h1_train", dp_feat_files, value=TRUE)
full_dp_feats <- tibble()
for (f in dp_feat_files){
sp <- ifelse(grepl("monthly", f), 12, ifelse(grepl("quarterly", f), 4, 1))
temp <- read_csv(paste0(feature_file_path, f)) %>%
mutate(data = strsplit(f, "_")[[1]][4])
if (sp %in% c(12, 4)){
temp <- temp %>%
select(-seasonal_strength, -peak, -trough, -seas_acf1, -seas_pacf)
}
full_dp_feats <- bind_rows(full_dp_feats, temp)
}
# VAR simulated features data frame
source('custom_feature_functions.R')
import_data <- function(file_string, sp){
ts <- read.csv(file_string)
td <- as.list(as.data.frame(t(ts)))
td <- lapply(td, function(x) x[!is.na(x)])
td <- lapply(td, function(x) ts(x, frequency=sp))
td <- lapply(td, function(x) ifelse(x >= 1, x, 1))
td <- lapply(td, log)
return(td)
}
feature_calculator <- function(ts, features_to_calculate, sp, keep_seasonal=FALSE){
temp <- tsfeatures(ts, features=features_to_calculate, scale=FALSE) %>%
select(-nperiods, -seasonal_period)
if (sp > 1 & !keep_seasonal){
temp <- temp %>%
select(-seasonal_strength, -peak, -trough, -seas_acf1, -seas_pacf)
}
return(temp)
}
var_sim_series <- grep("k-nts", list.files("../../Outputs/VAR Simulated/M3/"), value=TRUE, invert=TRUE)
var_sim_series <- grep("AN_", var_sim_series, value=TRUE, invert=TRUE)
var_sim_series <- grep("DP_", var_sim_series, value=TRUE, invert=TRUE)
var_sim_series <- grep("rate", var_sim_series, value=TRUE, invert=TRUE)
# features to calculate
# vector of feature names to calculate in k-nTS+
fv <- c("entropy_c", "lumpiness", "stability",
"max_level_shift_c", "max_var_shift_c", "max_kl_shift_c",
"crossing_points", "flat_spots", "hurst",
"unitroot_kpss", "unitroot_pp", "stl_features",
"acf_features", "pacf_features",
"nonlinearity", "series_mean", "series_variance",
"skewness", "kurtosis")
full_var_feats <- tibble()
for (f in var_sim_series){
print(f)
sp <- ifelse(grepl("monthly", f), 12, ifelse(grepl("quarterly", f), 4, 1))
temp <- import_data(paste0("../../Outputs/VAR Simulated/M3/", f), sp)
contains_infinity <- sapply(temp, function(x) sum(is.infinite(x))) == 0
temp <- temp[contains_infinity]
if (grepl("monthly-MICRO", f)){
var_sim_monthly_micro_feats <- feature_calculator(temp, fv, sp, keep_seasonal=TRUE) %>%
mutate(data = strsplit(f, "_")[[1]][1])
}
temp_feats <- feature_calculator(temp, fv, sp) %>%
mutate(data = strsplit(f, "_")[[1]][1])
full_var_feats <- bind_rows(full_var_feats, temp_feats)
}
## combine feature data frames, standardize, and perform PCA
full_og_feats <- full_og_feats %>%
mutate(series = "Original")
full_kntsp_feats <- full_kntsp_feats %>%
mutate(series= "k-nTS+")
full_knts_feats <- full_knts_feats %>%
mutate(series = 'k-nTS')
full_var_feats <- full_var_feats %>%
mutate(series = "VAR Sim")
full_an_feats <- full_an_feats %>%
mutate(series = "AN")
full_dp_feats <- full_dp_feats %>%
mutate(series = "DP")
full_feats <- full_og_feats %>%
bind_rows(full_kntsp_feats, full_knts_feats, full_var_feats, full_an_feats, full_dp_feats)
## individual feature boxplots
## need to include seasonal feature
var_sim_monthly_micro_feats <- var_sim_monthly_micro_feats %>%
mutate(snum = 1:n(),
method = "VAR Sim",
parameter = "1")
seasonal_mm_feats <- m3_full_features %>%
filter(method %in% c("AN", "DP", "k-nts", "k-nts-plus-bounded", "Original")) %>%
bind_rows(var_sim_monthly_micro_feats)
# which features were selected for the M3 monthly micro data
mm_selected <- m3_sf %>%
filter(data_set=="monthly-MICRO", is_selected=="Yes") %>%
group_by(var) %>%
summarize(n=n()) %>%
filter(n == 3)
## replicating how we chose the features for M3 monthly micro
## for display in the boxplot figure
features_boxplot <- seasonal_mm_feats %>%
select(method, data, spike, max_var_shift, series_variance, max_level_shift, series_mean, x_acf1) %>%
gather(key="Feature", value="Value", -method, -data) %>%
mutate(Feature = factor(Feature,
levels=c("spike",
"series_variance",
"max_var_shift",
"max_level_shift",
"series_mean",
"x_acf1"),
labels=c("Spike",
"Variance",
"Max Variance Shift",
"Max Level Shift",
"Mean",
"X ACF"))) %>%
ggplot(aes(x=factor(method, levels=c("Original", "VAR Sim", "k-nts-plus-bounded", "k-nts", "AN", "DP"), labels=c("Unprotected", "VAR Sim", "k-nTS+", "k-nTS", "AN", "DP")), y=Value)) +
geom_boxplot() +
facet_wrap(~Feature, scales='free') +
labs(x = "Privacy Method",
y = "Feature Value") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "bottom")
print(features_boxplot)
if (file.exists(paste0("../../Outputs/Figures/M3/"))){
ggsave(filename="features-boxplot.pdf", plot=features_boxplot, path="../../Outputs/Figures/M3/",
width = 11.1, height = 6)
} else {
dir.create(paste0("../../Outputs/Figures/M3/"), recursive=TRUE)
ggsave(filename="features-boxplot.pdf", plot=features_boxplot, path="../../Outputs/Figures/M3/",
width = 11.1, height = 6)
}
### look at the most frequently selected features plotted using PCA
m3_sf %>%
filter(is_selected == "Yes") %>%
group_by(var) %>%
summarize(n = n()) %>%
arrange(desc(n))
# PCA plots of features from k-nTS+ original and rate data sets
full_pca <- prcomp(full_feats[,names(full_feats) %in% c("series_variance",
"max_level_shift",
"spike",
"max_var_shift",
"series_mean",
"kurtosis")], center=TRUE, scale=TRUE)
# plots of kurtosis
full_feats[,names(full_feats) %in% c("series_variance",
"max_level_shift",
"spike",
"max_var_shift",
"series_mean",
"kurtosis")] %>%
bind_cols(full_feats[,c('data', 'series', 'entropy')]) %>%
ggplot(aes(x=series, y=kurtosis)) +
geom_boxplot()
summary(full_pca)
pcs <- as_tibble(full_pca$x[,1:2]) %>%
bind_cols(full_feats[,c('data', 'series', 'entropy', 'kurtosis')])
common_pca_plot <- pcs %>%
mutate(series = factor(series, levels=c("Original", "VAR Sim", "k-nTS+", "k-nTS", "AN", "DP"), labels=c("Unprotected", "VAR Sim", "k-nTS+", "k-nTS", "AN", "DP"))) %>%
ggplot(aes(x=PC1, y=PC2, color=entropy)) +
geom_point(alpha=0.5) +
facet_wrap(~series) +
labs(x  = "Principal Component 1",
y = "Principal Component 2",
color = "Spectral Entropy")
print(common_pca_plot)
if (file.exists(paste0("../../Outputs/Figures/M3/"))){
ggsave(filename="features-pca.pdf", plot=common_pca_plot, path="../../Outputs/Figures/M3/",
width = 11.1, height = 7)
} else {
dir.create(paste0("../../Outputs/Figures/M3/"), recursive=TRUE)
ggsave(filename="features-pca.pdf", plot=common_pca_plot, path="../../Outputs/Figures/M3/",
width = 11.1, height = 7)
}
full_pca$rotation[,1:2]
# calculate average spectral entropy value for each privacy method
pcs %>%
group_by(series) %>%
summarize(avg_entropy = mean(entropy))
prcomp
?prcomp
var_sim_series <- grep("k-nts", list.files("../../Outputs/VAR Simulated/M3/"), value=TRUE, invert=TRUE)
var_sim_series <- grep("AN_", var_sim_series, value=TRUE, invert=TRUE)
var_sim_series <- grep("DP_", var_sim_series, value=TRUE, invert=TRUE)
var_sim_series <- grep("rate", var_sim_series, value=TRUE, invert=TRUE)
# features to calculate
# vector of feature names to calculate in k-nTS+
fv <- c("entropy_c", "lumpiness", "stability",
"max_level_shift_c", "max_var_shift_c", "max_kl_shift_c",
"crossing_points", "flat_spots", "hurst",
"unitroot_kpss", "unitroot_pp", "stl_features",
"acf_features", "pacf_features",
"nonlinearity", "series_mean", "series_variance",
"skewness", "kurtosis")
full_var_feats <- tibble()
for (f in var_sim_series){
print(f)
sp <- ifelse(grepl("monthly", f), 12, ifelse(grepl("quarterly", f), 4, 1))
temp <- import_data(paste0("../../Outputs/VAR Simulated/M3/", f), sp)
contains_infinity <- sapply(temp, function(x) sum(is.infinite(x))) == 0
temp <- temp[contains_infinity]
if (grepl("monthly-MICRO", f)){
var_sim_monthly_micro_feats <- feature_calculator(temp, fv, sp, keep_seasonal=TRUE) %>%
mutate(data = strsplit(f, "_")[[1]][1])
cor_feats <- cross_correlations(temp)
var_sim_monthly_micro_feats <- bind_cols(var_sim_monthly_micro_feats, cor_feats)
}
temp_feats <- feature_calculator(temp, fv, sp) %>%
mutate(data = strsplit(f, "_")[[1]][1])
cor_feats <- cross_correlations(temp)
temp_feats <- bind_cols(temp_feats, cor_feats)
full_var_feats <- bind_rows(full_var_feats, temp_feats)
}
View(full_var_feats)
full_var_feats <- tibble()
for (f in var_sim_series){
print(f)
sp <- ifelse(grepl("monthly", f), 12, ifelse(grepl("quarterly", f), 4, 1))
temp <- import_data(paste0("../../Outputs/VAR Simulated/M3/", f), sp)
contains_infinity <- sapply(temp, function(x) sum(is.infinite(x))) == 0
temp <- temp[contains_infinity]
if (grepl("monthly-MICRO", f)){
var_sim_monthly_micro_feats <- feature_calculator(temp, fv, sp, keep_seasonal=TRUE) %>%
mutate(data = strsplit(f, "_")[[1]][1])
cor_feats <- abs(cross_correlations(temp))
var_sim_monthly_micro_feats <- bind_cols(var_sim_monthly_micro_feats, cor_feats)
}
temp_feats <- feature_calculator(temp, fv, sp) %>%
mutate(data = strsplit(f, "_")[[1]][1])
cor_feats <- abs(cross_correlations(temp))
temp_feats <- bind_cols(temp_feats, cor_feats)
full_var_feats <- bind_rows(full_var_feats, temp_feats)
}
View(full_var_feats)
full_og_feats <- full_og_feats %>%
mutate(series = "Original")
full_kntsp_feats <- full_kntsp_feats %>%
mutate(series= "k-nTS+")
full_knts_feats <- full_knts_feats %>%
mutate(series = 'k-nTS')
full_var_feats <- full_var_feats %>%
mutate(series = "VAR Sim")
full_an_feats <- full_an_feats %>%
mutate(series = "AN")
full_dp_feats <- full_dp_feats %>%
mutate(series = "DP")
full_feats <- full_og_feats %>%
bind_rows(full_kntsp_feats, full_knts_feats, full_var_feats, full_an_feats, full_dp_feats)
View(full_feats)
full_feats <- full_feats %>%
mutate(across(contains("cross_cor"), abs))
View(full_feats)
## individual feature boxplots
## need to include seasonal feature
var_sim_monthly_micro_feats <- var_sim_monthly_micro_feats %>%
mutate(snum = 1:n(),
method = "VAR Sim",
parameter = "1")
seasonal_mm_feats <- m3_full_features %>%
filter(method %in% c("AN", "DP", "k-nts", "k-nts-plus-bounded", "Original")) %>%
bind_rows(var_sim_monthly_micro_feats)
# which features were selected for the M3 monthly micro data
mm_selected <- m3_sf %>%
filter(data_set=="monthly-MICRO", is_selected=="Yes") %>%
group_by(var) %>%
summarize(n=n()) %>%
filter(n == 3)
mm_selected
features_boxplot <- seasonal_mm_feats %>%
select(method, data, spike, max_var_shift, series_variance, max_level_shift, series_mean, x_acf1) %>%
gather(key="Feature", value="Value", -method, -data) %>%
mutate(Feature = factor(Feature,
levels=c("spike",
"series_variance",
"max_var_shift",
"max_level_shift",
"series_mean",
"x_acf1"),
labels=c("Spike",
"Variance",
"Max Variance Shift",
"Max Level Shift",
"Mean",
"X ACF"))) %>%
ggplot(aes(x=factor(method, levels=c("Original", "VAR Sim", "k-nts-plus-bounded", "k-nts", "AN", "DP"), labels=c("Unprotected", "VAR Sim", "k-nTS+", "k-nTS", "AN", "DP")), y=Value)) +
geom_boxplot() +
facet_wrap(~Feature, scales='free') +
labs(x = "Privacy Method",
y = "Feature Value") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.position = "bottom")
print(features_boxplot)
m3_sf %>%
filter(is_selected == "Yes") %>%
group_by(var) %>%
summarize(n = n()) %>%
arrange(desc(n))
# PCA plots of features from k-nTS+ original and rate data sets
full_pca <- prcomp(full_feats[,names(full_feats) %in% c("series_variance",
"max_level_shift",
"spike",
"max_var_shift",
"series_mean",
"kurtosis")], center=TRUE, scale=TRUE)
# plots of kurtosis
full_feats[,names(full_feats) %in% c("series_variance",
"max_level_shift",
"spike",
"max_var_shift",
"series_mean",
"kurtosis")] %>%
bind_cols(full_feats[,c('data', 'series', 'entropy')]) %>%
ggplot(aes(x=series, y=kurtosis)) +
geom_boxplot()
summary(full_pca)
pcs <- as_tibble(full_pca$x[,1:2]) %>%
bind_cols(full_feats[,c('data', 'series', 'entropy', 'kurtosis')])
common_pca_plot <- pcs %>%
mutate(series = factor(series, levels=c("Original", "VAR Sim", "k-nTS+", "k-nTS", "AN", "DP"), labels=c("Unprotected", "VAR Sim", "k-nTS+", "k-nTS", "AN", "DP"))) %>%
ggplot(aes(x=PC1, y=PC2, color=entropy)) +
geom_point(alpha=0.5) +
facet_wrap(~series) +
labs(x  = "Principal Component 1",
y = "Principal Component 2",
color = "Spectral Entropy")
print(common_pca_plot)
if (file.exists(paste0("../../Outputs/Figures/M3/"))){
ggsave(filename="features-pca.pdf", plot=common_pca_plot, path="../../Outputs/Figures/M3/",
width = 11.1, height = 7)
} else {
dir.create(paste0("../../Outputs/Figures/M3/"), recursive=TRUE)
ggsave(filename="features-pca.pdf", plot=common_pca_plot, path="../../Outputs/Figures/M3/",
width = 11.1, height = 7)
}
full_pca$rotation[,1:2]
# calculate average spectral entropy value for each privacy method
pcs %>%
group_by(series) %>%
summarize(avg_entropy = mean(entropy))
### perform PCA using all features
# PCA plots of features from k-nTS+ original and rate data sets
full_pca <- prcomp(full_feats[full_feats$series %in% c("Original", "VAR Sim", "k-nTS+"), !names(full_feats) %in% c('time_level_shift',
'time_var_shift',
'time_kl_shift',
'data',
'series',
'cross_cor_1',
'cross_cor_2',
'cross_cor_3',
'cross_cor_4',
'cross_cor_5')], center=TRUE, scale=TRUE)
### perform PCA using all features
# PCA plots of features from k-nTS+ original and rate data sets
full_pca <- prcomp(full_feats[full_feats$series %in% c("Original", "VAR Sim", "k-nTS+"), !names(full_feats) %in% c('time_level_shift',
'time_var_shift',
'time_kl_shift',
'data',
'series')], center=TRUE, scale=TRUE)
summary(full_pca)
pcs <- as_tibble(full_pca$x[,1:2]) %>%
bind_cols(full_feats[full_feats$series %in% c("Original", "VAR Sim", "k-nTS+"), c('data', 'series', 'entropy')])
full_pca_plot <- pcs %>%
mutate(series = factor(series, levels=c("Original", "VAR Sim", "k-nTS+", "k-nTS", "AN", "DP"), labels=c("Unprotected", "VAR Sim", "k-nTS+", "k-nTS", "AN", "DP"))) %>%
ggplot(aes(x=PC1, y=PC2, color=entropy)) +
geom_point(alpha=0.5) +
facet_wrap(~series) +
labs(x  = "Principal Component 1",
y = "Principal Component 2",
color = "Spectral Entropy")
print(full_pca_plot)
full_pca$rotation
temp <- full_pca$rotation
View(temp)
if (file.exists(paste0("../../Outputs/Figures/M3/"))){
ggsave(filename="full-feature-pca.pdf", plot=full_pca_plot, path="../../Outputs/Figures/M3/",
width = 11.1, height = 7)
} else {
dir.create(paste0("../../Outputs/Figures/M3/"), recursive=TRUE)
ggsave(filename="full-feature-pca.pdf", plot=full_pca_plot, path="../../Outputs/Figures/M3/",
width = 11.1, height = 7)
}
?prcomp
summary(full_pca)
